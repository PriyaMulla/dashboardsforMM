=========================================
Usage Statistics Collection
=========================================

You can help us developing and improving the Time Tagger by enabling automated usage statistics collection.
The usage statistics data collection is designed to help us better understand how the Time Tagger hardware and software are used. 
This data includes the performance indicators, configuration, the state of the Time Tagger, and API usage patterns. 
The usage statistics data is pseudonymized [#f1]_ and cannot be linked to a specific user or specific hardware unit. 
On installation of the Time Tagger software, a random `user_id` will be created and added to the usage statistics reports.
Users can review the contents of usage statistics data by using the :func:`getUsageStatisticsReport`. 
Also users can disable usage statistics data collection at any time via Time Tagger API as ``setUsageStatisticsStatus(UsageStatisticsStatus.Disabled)``.
It is possible to enable the usage statistics collection temporarily and without automatic uploading which may be helpful for debugging. 


Contents of the usage statistics data
--------------------------------------

* Internal calibration data.
* Hardware sensor data obtainable with :meth:`TimeTagger.getSensorData` but with the serial number obscured.
* Time Tagger’s configuration as returned by :meth:`~TimeTaggerBase.getConfiguration` but with the serial number obscured.
* All warning and error messages produced by the Time Tagger software. All identifying information like serial numbers is obscured. 
* In addition, when Time Tagger Lab is used, information about the application crashes, errors and warnings. Such information is sent to and stored by a third party platform, sentry.io.
* Average, minimal, and maximal aggregate data rate sent over USB in each usage session.
* Usage and configuration of the measurements and their performance indicators.
* Computer’s processor name and capabilities, as well as the RAM size.


Ways of control
----------------------------------------
You will be asked to join Time Tagger improvement program during software installation. 
You can change your decision at any later time by uninstalling and installing the Time Tagger software again.

You can also control usage statistics collection through the programming interface. 
The following examples show how to perform key operations of enabling, disabling, and retrieving the usage statistics data.
See also :ref:`Usage statistics functions<api-usage-statistics>`.

.. rubric:: Get and set usage statistics collection status

::

    # 0 - UsageStatisticsStatus.Disabled
    # 1 - UsageStatisticsStatus.Collecting
    # 2 - UsageStatisticsStatus.CollectingAndUploading
    status = getUsageStatisticsStatus()

    # Enable usage statistics collection without uploading
    setUsageStatisticsStatus(UsageStatisticsStatus.Collecting)

    # Enable usage statistics collection with uploading
    setUsageStatisticsStatus(UsageStatisticsStatus.CollectingAndUploading)

    # Disable usage statistics collection
    setUsageStatisticsStatus(UsageStatisticsStatus.Disabled)
    


.. rubric:: Get current usage statistics data

::

    json_string = getUsageStatisticsReport()



.. rubric:: Footnotes

.. [#f1] Here "pseudonymized" means that the user retains privacy of their data and remain unidentified as long as their `user_id` (pseudonym) is not matched to their personal identity.
    